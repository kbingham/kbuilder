LINUX_SRC?=$(BUILDSYS_SOURCES)/linux
LINUX_VERSION:=$(shell grep -E "^VERSION|^PATCHLEVEL" $(LINUX_SRC)/Makefile | sed -e s'/.* = //' | sed -e 'N;s/\n/./')
LINUX_BUILD?=$(BUILDSYS_BUILD)/$(ARCH)/$(TARGET)/linux-$(LINUX_VERSION)

LINUX_GIT_REPO  ?= git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git

LINUX_DEFAULT_TARGET?=zImage

LINUX_CURRENT:=$(shell uname -r)

.PHONY: linux
linux: $(LINUX_DEFAULT_TARGET)

## Obtain the sources:

$(LINUX_SRC):
	git clone $(LINUX_GIT_REPO) $(LINUX_SRC)


J?=$(shell nproc)

## Linux uses a different naming format than everyone else for ARM64
ifeq ($(ARCH),aarch64)
LINUX_ARCH=arm64
LINUX_DTBS:=$(LINUX_BUILD)/arch/$(LINUX_ARCH)/boot/dts/*/*.dtb
  # Apparently not overridden?
LINUX_DTB_OVERLAYS:=$(LINUX_BUILD)/arch/$(LINUX_ARCH)/boot/dts/overlays/*.dtbo
else
LINUX_ARCH?=$(ARCH)
LINUX_DTBS:=$(LINUX_BUILD)/arch/$(LINUX_ARCH)/boot/dts/*.dtb
LINUX_DTB_OVERLAYS:=$(LINUX_BUILD)/arch/$(LINUX_ARCH)/boot/dts/overlays/*.dtbo
endif

## Helpers for targets
LINUX_SHA1=$(shell cd $(LINUX_SRC) && git describe --always --dirty --long --tags)
LINUX_IMAGES:=$(LINUX_BUILD)/arch/$(LINUX_ARCH)/boot/*Image
LINUX_CONFIG:=$(BUILDSYS_TARGET_CONF)/kernel.config.v$(LINUX_VERSION)

LINUX_ZIMAGE:=$(LINUX_BUILD)/arch/$(LINUX_ARCH)/boot/zImage

LINUX_PACKAGE_TGZ:=linux-package-v$(LINUX_VERSION).tgz

LINUX_KBUILD=$(LINUX_SRC)

linux-version:
	@echo $(LINUX_VERSION)

linux-sha1:
	@echo $(LINUX_SHA1)

module-current: LINUX_BUILD:=$(LINUX_BUILD)-$(LINUX_CURRENT)
module-current: LINUX_KBUILD=/lib/modules/$(LINUX_CURRENT)/build
module-current: module

W=W=1

LINUX_CMD = \
	/usr/bin/time -v $(MAKE) -C $(LINUX_KBUILD) \
		O=$(LINUX_BUILD) \
		KCONFIG_CONFIG=$(LINUX_CONFIG) \
		ARCH=$(LINUX_ARCH) \
		CROSS_COMPILE=$(CROSS_COMPILE) \
		INSTALL_MOD_PATH=$(TARGET_MOD_DIR) \
		$(LINUX_BUILD_EXTRA) \
		DTC_FLAGS=-@ \
		$(W) \
		-j$(J)

# Automatically install the linux checkpatch commit hook
$(LINUX_SRC)/.git/hooks/post-commit: $(LINUX_SRC)
	@echo "  [GITHOOKS] Installing linux post-commit hook"
	@ln -fsr $(BUILDSYS_ROOT)/build-common/scripts/git-linux-post-commit.sh $@

linux-%: | $(LINUX_SRC) $(LINUX_SRC)/.git/hooks/post-commit
	$(LINUX_CMD) $*

## Enable full warnings on device tree objects
dtbs: W=W=1
## Validate all DTBs
dtbs: linux-dtbs_check

.PHONY:	vmlinux zImage
uImage vmlinux bzImage zImage xipImage dtbs modules modules_install oldconfig: | $(LINUX_SRC) $(LINUX_BUILD)
	$(LINUX_CMD) $@

/%.dtb:
	@echo Ignoring request to build fully qualified path of DTB

# Linux knows how to make DTB's
%.dtb: $(LINUX_SRC)
	$(LINUX_CMD) W=1 $@

# Target Configurations should define their expected DTB
dtb: $(DTB)

linux_help: $(LINUX_SRC)
	$(LINUX_CMD) help

## External Module support

module:
	$(LINUX_CMD) modules M=$(M)

module_install:
	$(LINUX_CMD) modules_install M=$(M)


## Configuration and Build Preparation
$(LINUX_BUILD):
	@mkdir -p $@

linux-savedefconfig:
	$(LINUX_CMD) savedefconfig
	@echo "Copying $(LINUX_BUILD)/defconfig to $(LINUX_CONFIG).defconfig"
	@cp $(LINUX_BUILD)/defconfig $(LINUX_CONFIG).defconfig

menuconfig: $(LINUX_SRC) $(LINUX_BUILD)
	$(LINUX_CMD) $@
	$(LINUX_CMD) savedefconfig
	@echo "Copying $(LINUX_BUILD)/defconfig to $(LINUX_CONFIG).defconfig"
	@cp $(LINUX_BUILD)/defconfig $(LINUX_CONFIG).defconfig

%_defconfig: $(LINUX_SRC) $(LINUX_BUILD)
	@echo " [CONFIG] Configuring from $@"
	$(LINUX_CMD) $@

defconfig $(BUILDSYS_TARGET_CONF)/kernel.config: | $(LINUX_SRC) $(LINUX_BUILD)
	@echo "Making DEFCONFIG to create $(LINUX_CONFIG) from $(DEFCONFIG)"
	$(LINUX_CMD) $@

# Exported Defines for external packages to utilise

# LINUX_DTBS:=$(LINUX_BUILD)/arch/$(LINUX_ARCH)/boot/dts/
LINUX_VMLINUX:=$(LINUX_BUILD)/vmlinux

# Extra helpers
ADDR2LINE=$(shell which $(CROSS_COMPILE)addr2line)
linux-addr2line:
	$(ADDR2LINE) -e $(LINUX_VMLINUX)


linux-distclean:
	rm -r $(LINUX_BUILD)

linux-ksize:
	cd $(LINUX_BUILD) && ksize.py

LINUX_PKG_INSTALL=/tmp/kbuilder/linux/

.linux-package-prep:
	rm -rf $(LINUX_PKG_INSTALL)
	mkdir -p $(LINUX_PKG_INSTALL)

linux-package: TARGET_MOD_DIR:=$(LINUX_PKG_INSTALL)
linux-package: .linux-package-prep dtb linux modules modules_install
	@echo "Creating linux-package"
	@mkdir -p $(LINUX_PKG_INSTALL)/boot/firmware
	@mkdir -p $(LINUX_PKG_INSTALL)/boot/overlays
	@cp $(LINUX_IMAGES) 		$(LINUX_PKG_INSTALL)/boot/firmware/
	@cp $(LINUX_DTBS) 		$(LINUX_PKG_INSTALL)/boot/firmware/
	@cp $(LINUX_DTB_OVERLAYS)	$(LINUX_PKG_INSTALL)/boot/overlays/
	@tar -C $(LINUX_PKG_INSTALL) -czf $(LINUX_PACKAGE_TGZ) ./

kbuild-linux-help:
	@echo "LINUX_IMAGES		: $(LINUX_IMAGES)"
	@echo "LINUX_DTBS		: $(LINUX_DTBS)"
	@echo "LINUX_DTB_OVERLAYS	: $(LINUX_DTB_OVERLAYS)"

HELP+=kbuild-linux-help

