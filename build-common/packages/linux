LINUX_SRC?=$(BUILDSYS_SOURCES)/linux
LINUX_BUILD?=$(BUILDSYS_BUILD)/$(ARCH)/$(TARGET)/linux

LINUX_GIT_REPO  ?= git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git

LINUX_DEFAULT_TARGET?=zImage

LINUX_CURRENT:=$(shell uname -r)

.PHONY: linux
linux: $(LINUX_DEFAULT_TARGET)

## Obtain the sources:

$(LINUX_SRC):
	git clone $(LINUX_GIT_REPO) $(LINUX_SRC)


J?=8

## Linux uses a different naming format than everyone else for ARM64
ifeq ($(ARCH),aarch64)
LINUX_ARCH=arm64
LINUX_DTBS:=$(LINUX_BUILD)/arch/$(LINUX_ARCH)/boot/dts/*/*.dtb
else
LINUX_ARCH?=$(ARCH)
LINUX_DTBS:=$(LINUX_BUILD)/arch/$(LINUX_ARCH)/boot/dts/*.dtb
endif

## Helpers for targets
LINUX_IMAGES:=$(LINUX_BUILD)/arch/$(LINUX_ARCH)/boot/*Image
LINUX_CONFIG:=$(BUILDSYS_TARGET_CONF)/kernel.config


LINUX_KBUILD=$(LINUX_SRC)

module-current: LINUX_BUILD:=$(LINUX_BUILD)-$(LINUX_CURRENT)
module-current: LINUX_KBUILD=/lib/modules/$(LINUX_CURRENT)/build
module-current: module


LINUX_CMD = \
	$(MAKE) -C $(LINUX_KBUILD) \
		O=$(LINUX_BUILD) \
		KCONFIG_CONFIG=$(LINUX_CONFIG) \
		ARCH=$(LINUX_ARCH) \
		CROSS_COMPILE=$(CROSS_COMPILE) \
		INSTALL_MOD_PATH=$(TARGET_MOD_DIR) \
		$(LINUX_BUILD_EXTRA) \
		$(W) \
		-j$(J)

# Automatically install the linux checkpatch commit hook
$(LINUX_SRC)/.git/hooks/pre-commit: $(LINUX_SRC)
	@echo "  [GITHOOKS] Installing linux pre-commit hook"
	@ln -fsr $(BUILDSYS_ROOT)/build-common/scripts/git-linux-pre-commit.sh $@

linux-%: | $(LINUX_SRC) $(LINUX_SRC)/.git/hooks/pre-commit
	$(LINUX_CMD) $*

## Enable full warnings on device tree objects
dtbs: W=W=1

.PHONY:	vmlinux zImage
uImage vmlinux bzImage zImage xipImage dtbs modules modules_install oldconfig: | $(LINUX_SRC) $(LINUX_BUILD)
	$(LINUX_CMD) $@

# Linux knows how to make DTB's
%.dtb: $(LINUX_SRC)
	$(LINUX_CMD) W=1 $@

# Target Configurations should define their expected DTB
dtb: $(DTB)

linux_help: $(LINUX_SRC)
	$(LINUX_CMD) help

## External Module support

module:
	$(LINUX_CMD) modules M=$(M)
	$(LINUX_CMD) modules_install M=$(M)


## Configuration and Build Preparation
$(LINUX_BUILD):
	@mkdir -p $@

linux-savedefconfig:
	$(LINUX_CMD) savedefconfig
	@echo "Copying $(LINUX_BUILD)/defconfig to $(BUILDSYS_TARGET_CONF)/kernel.config.defconfig"
	@cp $(LINUX_BUILD)/defconfig $(BUILDSYS_TARGET_CONF)/kernel.config.defconfig

menuconfig: $(LINUX_SRC) $(LINUX_BUILD)
	$(LINUX_CMD) $@

%_defconfig: $(LINUX_SRC) $(LINUX_BUILD)
	@echo " [CONFIG] Configuring from $@"
	$(LINUX_CMD) $@

defconfig $(BUILDSYS_TARGET_CONF)/kernel.config: | $(LINUX_SRC) $(LINUX_BUILD)
	@echo "Making DEFCONFIG to create $(LINUX_CONFIG) from $(DEFCONFIG)"
	$(MAKE) $(DEFCONFIG)

# Exported Defines for external packages to utilise

# LINUX_DTBS:=$(LINUX_BUILD)/arch/$(LINUX_ARCH)/boot/dts/
LINUX_VMLINUX:=$(LINUX_BUILD)/vmlinux

# Extra helpers
ADDR2LINE=$(shell which $(CROSS_COMPILE)addr2line)
linux-addr2line:
	$(ADDR2LINE) -e $(LINUX_VMLINUX)


linux-distclean:
	rm -r $(LINUX_BUILD)

linux-ksize:
	cd $(LINUX_BUILD) && ksize.py
